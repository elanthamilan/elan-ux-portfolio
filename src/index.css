@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  /* Color variables are now managed by tailwind.config.js */

  :root {
    --radius: 0.5rem; /* Standard Shadcn UI radius variable */
  }

  * {
    @apply border-border; /* Uses 'border' color from Tailwind config */
  }

  body {
    @apply bg-background text-foreground; /* Uses 'background' and 'foreground' from Tailwind config */
    font-family: 'DM Sans', sans-serif;
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: 'DM Serif Text', serif;
  }

  a {
    @apply text-brand-primary hover:text-brand-secondary;
  }

  /* 
    The :root and .dark HSL variable blocks have been removed.
    Tailwind's 'darkMode: class' strategy will apply dark mode styles
    based on the presence of the 'dark' class on a parent element (usually html or body).
    The color definitions in tailwind.config.js under `theme.extend.colors`
    will be used directly by Tailwind utilities. For dark mode, if you need
    different hex values, you would typically define them like:
    'primary': {
      DEFAULT: '#LIGHT_PRIMARY_HEX',
      dark: '#DARK_PRIMARY_HEX', // This is not how Shadcn/Tailwind typically does it with CSS vars
    }
    Or, more commonly with CSS variables managed by a theme provider or by Tailwind itself
    if you were to keep HSL variables and have Tailwind generate them.
    Since we've moved to direct hex in the config, the ThemeProvider or a similar mechanism
    would toggle the 'dark' class, and Tailwind utilities would apply the correct colors
    if they were defined with dark variants in the config (e.g. `dark:bg-dark-background`).
    
    The current tailwind.config.js defines single hex values for each color.
    If different colors are needed for dark mode, they should be added to the
    Tailwind config with `dark:` prefixes for utilities (e.g., `bg-background dark:bg-gray-900`)
    or by defining dark mode variants directly in the `colors` object if a more complex
    CSS variable strategy for dark mode was to be maintained via Tailwind plugin (less common for this setup).

    For this refactor, we assume the `darkMode: 'class'` in tailwind.config.js
    and utility classes like `dark:bg-whatever` will be used throughout the components
    to define dark mode-specific styles, leveraging the palette defined in the config.
    The :root and .dark blocks previously defined HSL variables which are now superseded.
  */
}

/* Keep existing utility classes as they might be used by components */
.card {
  overflow: hidden;
  transition: height 0.3s ease;
}

.card.expanded {
  height: auto;
}

/* Fade-in effect */
.fade-in {
  opacity: 0;
  transition: opacity 0.5s ease-in-out;
}

.fade-in.loaded {
  opacity: 1;
}

/* Case study card hover effect */
.card-hover-details {
  opacity: 0;
  transition: opacity 0.3s ease;
}

.group:hover .card-hover-details {
  opacity: 1;
}


/* Glowing shadow effect on hover */
.case-study-card {
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  position: relative;
}

.group:hover .case-study-card {
  transform: scale(1.03);
  box-shadow: 0 10px 20px rgba(0,0,0,0.1), 0 6px 6px rgba(0,0,0,0.1);
}

.glitter-border {
  border: none;
}

.long-description p {
  font-size: 1rem;
}
